scalar Date

interface Node {
  id: ID!
}

type Query {
  items: [Item!]!
  node(id: ID!): Node
  item(id: ID!): Item
  applicant(input: ApplicantWhereUniqueInput!): Applicant
}

type Mutation {
  createItem(input: CreateItemInput!): ItemPayload!
  updateItem(input: UpdateItemInput!): ItemPayload!
  deleteItem(input: DeleteItemInput!): ItemPayload!
  createApplicant(input: CreateApplicantInput!): ApplicantPayload!
  createRequest(input: CreateRequestInput!): RequestPayload!
  updateRequest(input: UpdateRequestInput!): RequestPayload!
}

input ApplicantWhereUniqueInput {
  id: ID
  registrationNumber: String
}

type Subscription {
  onCreateItem: Item!
}

type Item implements Node {
  id: ID!
  name: String!
  quantity: Int!
  requests: [Request!]!
}

type ItemPayload {
  clientMutationId: String
  item: Item
}

input CreateItemInput {
  clientMutationId: String
  name: String!
  quantity: Int!
}

input UpdateItemInput {
  id: ID!
  name: String
  quantity: Int
}

input UpdateRequestInput {
  id: ID!
  dateRequested: Date
  delivered: Boolean
  dateDelivered: Date
  quantity: Int
}

input CreateApplicantInput {
  clientMutationId: String
  registrationNumber: String!
  semester: String!
  name: String!
}

input CreateRequestInput {
  clientMutationId: String
  item: ID!
  applicant: ID!
  quantity: Int!
}

input DeleteItemInput {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Applicant implements Node {
  id: ID!
  registrationNumber: String!
  requests: [Request!]!
  semester: String!
  name: String!
}

type ApplicantPayload {
  clientMutationId: String
  applicant: Applicant
}

type Request implements Node {
  id: ID!
  applicant: Applicant!
  item: Item!
  dateRequested: Date!
  delivered: Boolean!
  dateDelivered: Date
  quantity: Int!
}

type RequestPayload {
  clientMutationId: String
  request: Request
}
